type GhostkeysVetKdArgs = record {
  scope : Scope;
  input : blob;
  transport_public_key : blob;
};
type LoginColumn = record { rows : vec record { nat8; blob }; label : blob };
type Logins = record { columns : vec record { nat8; LoginColumn } };
type Result = variant { Ok : blob; Err : text };
type Scope = variant {
  PerUser : record { user : principal };
  PerOrg : record { org_id : blob };
  PerCanister;
};
type Spreadsheet = record { columns : vec record { nat8; SpreadsheetColumn } };
type SpreadsheetColumn = record { rows : vec record { nat8; blob } };
service : {
  derive_vetkd_encrypted_key : (GhostkeysVetKdArgs) -> (Result);
  get_logins : (principal) -> (Logins) query;
  get_spreadsheet : (principal) -> (Spreadsheet) query;
  get_vetkey_for_user : (text) -> (opt blob) query;
  global_sync : (principal, blob) -> ();
  shared_canister_init : (principal, principal) -> ();
  vault_login_data_deletes : (principal, blob) -> ();
  vault_login_data_sync : (principal, blob) -> ();
  vault_login_full_sync : (principal, blob) -> ();
  vault_login_metadata_delete : (principal, blob) -> ();
  vault_login_metadata_sync : (principal, blob) -> ();
  vault_secrets_sync : (principal, blob) -> ();
  vault_spreadsheet_deletes : (principal, blob) -> ();
  vault_spreadsheet_sync : (principal, blob) -> ();
}
