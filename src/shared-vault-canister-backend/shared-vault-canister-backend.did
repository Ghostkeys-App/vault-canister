type GhostkeysVetKdArgs = record {
  scope : Scope;
  input : blob;
  transport_public_key : blob;
};
type LoginColumn = record { rows : vec record { nat8; blob }; label : blob };
type Logins = record { columns : vec record { nat8; LoginColumn } };
type Note = record { note : blob; label : blob };
type Notes = record { notes : vec record { nat8; Note } };
type Result = variant { Ok : blob; Err : text };
type Scope = variant {
  PerUser : record { user : principal };
  PerOrg : record { org_id : blob };
  PerCanister;
};
type Spreadsheet = record { columns : vec record { nat8; SpreadsheetColumn } };
type SpreadsheetColumn = record { rows : vec record { nat8; blob } };
type UserVaults = record { vaults : vec record { blob; VaultData } };
type VaultData = record {
  spreadsheet_columns : vec record { nat8; record { blob; bool } };
  logins : Logins;
  vault_name : blob;
  notes : Notes;
  spreadsheet : Spreadsheet;
};
type VaultNames = record { names : vec record { blob; blob } };
service : {
  delete_vault : (principal) -> ();
  derive_vetkd_encrypted_key : (GhostkeysVetKdArgs) -> (Result);
  get_all_user_vaults : (principal) -> (UserVaults) query;
  get_logins : (principal) -> (Logins) query;
  get_secure_notes : (principal) -> (Notes) query;
  get_spreadsheet : (principal) -> (Spreadsheet) query;
  get_spreadsheet_columns : (principal) -> (
      vec record { nat8; record { blob; bool } },
    ) query;
  get_user_vault : (principal) -> (VaultData) query;
  get_vault_name : (principal) -> (blob) query;
  get_vault_names : () -> (VaultNames) query;
  get_vetkey_for_user : (text) -> (opt blob) query;
  global_sync : (principal, blob) -> ();
  shared_canister_init : (principal, principal) -> ();
  vault_login_data_deletes : (principal, blob) -> ();
  vault_login_data_sync : (principal, blob) -> ();
  vault_login_full_sync : (principal, blob) -> ();
  vault_login_metadata_delete : (principal, blob) -> ();
  vault_login_metadata_sync : (principal, blob) -> ();
  vault_names_sync : (blob) -> ();
  vault_secrets_sync : (principal, blob) -> ();
  vault_spreadsheet_columns_sync : (principal, blob) -> ();
  vault_spreadsheet_deletes : (principal, blob) -> ();
  vault_spreadsheet_sync : (principal, blob) -> ();
}
